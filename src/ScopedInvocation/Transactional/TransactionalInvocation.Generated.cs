
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. 
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using Microsoft.Extensions.Logging;

namespace ScopedInvocation.Transactional
{

    public interface ITransactionalInvocation<T1>
    {
        Task InvokeAsync(Func<T1, CancellationToken, Task> action,
            CancellationToken cancellationToken = default);

        Task InvokeAsync(Action<BaseScopedInvocationOptions>? options, Func<T1, CancellationToken, Task> action,
            CancellationToken cancellationToken = default);
    }

    internal class TransactionalInvocation<T1> : TransactionalInvocation, ITransactionalInvocation<T1>
        where T1: notnull
    {
        public TransactionalInvocation(IScopedInvocationContextManager contextManager, 
            IOptions<TransactionalInvocationOptions>? defaultOptions, 
            ILogger<BaseScopedInvocation<TransactionalInvocationOptions>>? logger,
            ITransactionManager transactionManager) : base(contextManager, defaultOptions, logger, transactionManager)
        {
        }

        public Task InvokeAsync(Func<T1, CancellationToken, Task> action,
            CancellationToken cancellationToken = default) =>
                InvokeAsync(options: null, action: action, cancellationToken);

        public Task InvokeAsync(Action<BaseScopedInvocationOptions>? options, Func<T1, CancellationToken, Task> action,
            CancellationToken cancellationToken = default) =>
                base.InvokeAsync(options, async s => await action(s.GetRequiredService<T1>(), cancellationToken).ConfigureAwait(false), cancellationToken);
        
    }   


    public interface ITransactionalInvocation<T1, T2>
    {
        Task InvokeAsync(Func<T1, T2, CancellationToken, Task> action,
            CancellationToken cancellationToken = default);

        Task InvokeAsync(Action<BaseScopedInvocationOptions>? options, Func<T1, T2, CancellationToken, Task> action,
            CancellationToken cancellationToken = default);
    }

    internal class TransactionalInvocation<T1, T2> : TransactionalInvocation, ITransactionalInvocation<T1, T2>
        where T1: notnull
        where T2: notnull
    {
        public TransactionalInvocation(IScopedInvocationContextManager contextManager, 
            IOptions<TransactionalInvocationOptions>? defaultOptions, 
            ILogger<BaseScopedInvocation<TransactionalInvocationOptions>>? logger,
            ITransactionManager transactionManager) : base(contextManager, defaultOptions, logger, transactionManager)
        {
        }

        public Task InvokeAsync(Func<T1, T2, CancellationToken, Task> action,
            CancellationToken cancellationToken = default) =>
                InvokeAsync(options: null, action: action, cancellationToken);

        public Task InvokeAsync(Action<BaseScopedInvocationOptions>? options, Func<T1, T2, CancellationToken, Task> action,
            CancellationToken cancellationToken = default) =>
                base.InvokeAsync(options, async s => await action(s.GetRequiredService<T1>(), s.GetRequiredService<T2>(), cancellationToken).ConfigureAwait(false), cancellationToken);
        
    }   


    public interface ITransactionalInvocation<T1, T2, T3>
    {
        Task InvokeAsync(Func<T1, T2, T3, CancellationToken, Task> action,
            CancellationToken cancellationToken = default);

        Task InvokeAsync(Action<BaseScopedInvocationOptions>? options, Func<T1, T2, T3, CancellationToken, Task> action,
            CancellationToken cancellationToken = default);
    }

    internal class TransactionalInvocation<T1, T2, T3> : TransactionalInvocation, ITransactionalInvocation<T1, T2, T3>
        where T1: notnull
        where T2: notnull
        where T3: notnull
    {
        public TransactionalInvocation(IScopedInvocationContextManager contextManager, 
            IOptions<TransactionalInvocationOptions>? defaultOptions, 
            ILogger<BaseScopedInvocation<TransactionalInvocationOptions>>? logger,
            ITransactionManager transactionManager) : base(contextManager, defaultOptions, logger, transactionManager)
        {
        }

        public Task InvokeAsync(Func<T1, T2, T3, CancellationToken, Task> action,
            CancellationToken cancellationToken = default) =>
                InvokeAsync(options: null, action: action, cancellationToken);

        public Task InvokeAsync(Action<BaseScopedInvocationOptions>? options, Func<T1, T2, T3, CancellationToken, Task> action,
            CancellationToken cancellationToken = default) =>
                base.InvokeAsync(options, async s => await action(s.GetRequiredService<T1>(), s.GetRequiredService<T2>(), s.GetRequiredService<T3>(), cancellationToken).ConfigureAwait(false), cancellationToken);
        
    }   


    public static class ServiceInvokerExtensions
    {
        public static IServiceCollection AddTransactionalInvocationGenerics(this IServiceCollection services)
        {
            services.AddTransient(typeof(ITransactionalInvocation<>), typeof(TransactionalInvocation<>));
            services.AddTransient(typeof(ITransactionalInvocation<,>), typeof(TransactionalInvocation<,>));
            services.AddTransient(typeof(ITransactionalInvocation<,,>), typeof(TransactionalInvocation<,,>));
            return services;
        }
    }

}
